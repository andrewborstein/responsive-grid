/*
 * ----------------------
 * BOX SIZING
 * ----------------------
 */

/*
 * Keep my container the same size when I add a border or padding.
 * Push my content inwards, as opposed to expanding my container outwards.
 */
html {
  box-sizing: border-box;
}
*, *:before, *:after {
  box-sizing: inherit;
}



/*
 * ----------------------
 * CONTAINER
 * ----------------------
 */

/*
 * A container holds all elements and controls the pageâ€™s maximum width.
 * Using a container will make designing for responsive easier!
 */
.container {
  margin-left: auto;
  margin-right: auto;
  max-width: 1140px; /* This should the maximum width of your website content! Change at your leisure... */
  overflow: auto;
  padding: 1em 2em;
}

/* ...or use the .container-fluid class instead, to make the content always stretch to be full-width. */
.container.fluid {
  max-width: none;
}



/*
 * ----------------------
 * ROW
 * ----------------------
 */

/*
 * We wrap our columns inside rows to prevent other elements from stacking next to them, i.e. clearing issues.
 * We fix these by applying a version of the popular "clearfix" (http://cssmojo.com/the-very-latest-clearfix-reloaded/)
 * to our row class, which will contain floated column elements.
 * We use negative margins to make sure rows/column can be infinitely nested.
 */
.row {
  margin-left: -1em;
  margin-right: -1em;
}
.row:after {
  clear: both;
  content: " ";
  display: block;
}

/* Add some vertical rhythm (space between each row) by default */
.row + .row {
  margin-top: 1em;
}



/*
 * ----------------------
 * COLUMN
 * ----------------------
 */

/*
 * Use float to line up our grid elements next to each other.
 * By default (i.e. mobile devices), make all columns 100% wide with some padding.
 */
.column {
  float: left;
  padding: 1em;
  width: 100%;
}

/* Add some vertical rhythm (space between each column) by default, only on mobile. */
.column + .column {
  margin-top: 1em;
}
@media (min-width: 769px) {
  .column + .column {
    margin-top: 0;
  }
}



/*
 * ----------------------
 * COLUMN LAYOUT
 * ----------------------
 */

/*
 * On all screens 769px and larger (landscape tablets + desktops), enable a grid layout with different width columns.
 */
@media (min-width: 769px) {

  .column.three-fourths { width: 75%; }
  .column.two-thirds    { width: 66.666%; }
  .column.one-half      { width: 50%; }
  .column.one-third     { width: 33.333%; }
  .column.one-fourth    { width: 25%; }
  .column.one-sixth     { width: 16.666%; }

}



/*
 * ----------------------
 * COLUMN OFFSET
 * ----------------------
 */

/*
 * Offset a grid element, by (virutally) creating an empty one.
 */
 @media (min-width: 769px) {

  .column.offset-three-fourths  { margin-left: 75%; }
  .column.offset-two-thirds     { margin-left: 66.666%; }
  .column.offset-one-half       { margin-left: 50%; }
  .column.offset-one-third      { margin-left: 33.333%; }
  .column.offset-one-fourth     { margin-left: 25%; }
  .column.offset-one-sixth      { margin-left: 16.666%; }

}



/*
 * ----------------------
 * EXTRAS
 * ----------------------
 */

/*
 * flow-opposite
 * ----------------------
 * Add .flow-opposite to columns where you want a column on the right on desktop to display first on mobile.
 */
.column.flow-opposite { float: right; }

/*
 * no-padding
 * ----------------------
 * Enable a grid without padding inside columns by adding '.no-padding' to a '.container' element.
 */
.no-padding .column {
  padding: 0;
}

/*
 * no-margin
 * ----------------------
 * Enable a grid without margin between rows (everywhere) and columns (on mobile) by adding '.no-margin' to the '.container'.
 */
.no-margin .row,
.no-margin .column {
  margin-top: 0;
}
